---
title: "Aula 7"
format: html
editor: visual
---

# Importanto os dados

Carregamos os pacotes `tidyverse` (para manipulação e visualização de dados) e `gsheet` (para ler dados do Google Sheets). Em seguida, a função `gsheet2tbl` foi é utilizada para ler os dados do Google Drive, armazenando-os no data frame soja. Por fim, a função `mutate` do pacote `dplyr` (parte do tidyverse) foi usada para converter as colunas TRAT e BLOCO em fatores, garantindo que esses dados sejam tratados como variáveis categóricas no data frame.

```{r}
library(tidyverse)
library(gsheet)

soja <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit#gid=866852711")

soja <- soja |>
  mutate(TRAT = as.factor(TRAT),
         BLOCO = as.factor(BLOCO))
```

### Visualização dos dados

Carregamos as bibliotecas `ggplot2` (para criação de gráficos) e `Hmisc` (para funções estatísticas). Em seguida, os dados do data frame `soja` foram utilizados para criar um gráfico utilizando a função `ggplot`. Os dados são mapeados de forma que a variável `TRAT` é representada no eixo x e a variável `DFC` no eixo y. A função `geom_jitter` adiciona um gráfico de dispersão com um pequeno desvio horizontal (`width = 0.05`) para evitar sobreposição de pontos, usando a cor cinza ("gray"). A função `stat_summary` adiciona um resumo estatístico, onde `fun.data = "mean_cl_boot"` calcula a média e o intervalo de confiança utilizando o método bootstrap, e os resultados são exibidos em vermelho ("red") com uma espessura de linha de 0.5 e uma opacidade de 0.5. Finalmente, o objeto `dfc` armazena o gráfico resultante.

```{r}
library(ggplot2)
library(Hmisc)

dfc <-soja |>
  ggplot(aes(TRAT, DFC))+
  geom_jitter(width = 0.05, color = 
                "gray")+
  stat_summary(fun.data = 
                 "mean_cl_boot", size = 0.5, color = 
                 "red", alpha = 0.5)
dfc
```

Foram realizados as mesmas etapas igual ao item anterior

```{r}
fer <-soja |>
  ggplot(aes(TRAT, FER))+
  geom_jitter(width = 0.05, color = 
                "gray")+
  stat_summary(fun.data = 
                 "mean_cl_boot", size = 0.5, color = 
                 "red", alpha = 0.5)
fer
```

Foram realizados as mesmas etapas igual aos itens anteriores

```{r}
prod <-soja |>
  ggplot(aes(TRAT, PROD))+
  geom_jitter(width = 0.05, color = 
                "gray")+
  stat_summary(fun.data = 
                 "mean_cl_boot", size = 0.5, color = 
                 "red", alpha = 0.5)
prod
```

Carregamos o pacote `patchwork` a para facilitar a combinação de múltiplos gráficos em uma única visualização. Em seguida, o código combina os gráficos dfc, prod, e fer lado a lado em uma única visualização utilizando a sintaxe dfc \| prod \| fer. A barra vertical (\|) é usada para colocar os gráficos lado a lado.

```{r}
library(patchwork)

(dfc|prod|fer)
```

# Anova

Primeiramente, criamos um modelo linear aov_dfc para a variável DFC em função de TRAT e BLOCO utilizando a função lm. Em seguida, a análise de variância (ANOVA) é realizada com a função anova. Carregamos o pacote `performance` para verificar a heterocedasticidade e a normalidade dos resíduos do modelo aov_dfc utilizando as funções `check_heteroscedasticity` e `check_normality`. A biblioteca `emmeans` é utilizada para calcular as médias marginais ajustadas dos níveis de TRAT, armazenadas em medias_dfc. A função `pwpm` exibe a matriz de comparações múltiplas entre as médias. A biblioteca multcomp é usada para gerar letras indicadoras de agrupamento homogêneo com a função `cld`. As mesmas etapas foram realizadas para as variáveis fer e prod.

```{r}
aov_dfc <- lm (DFC ~ TRAT + BLOCO,
               data = soja)
anova(aov_dfc)
library(performance)
check_heteroscedasticity(aov_dfc)
check_normality(aov_dfc)
library(emmeans)
medias_dfc <- emmeans(aov_dfc, ~ TRAT)
medias_dfc
pwpm(medias_dfc)
library(multcomp)
cld(medias_dfc, Letters = LETTERS)

aov_fer <- lm ( log (FER) ~ TRAT + BLOCO,
               data = soja) ##Estou transformando aqui
anova(aov_fer)
library(performance)
check_heteroscedasticity(aov_fer)
check_normality(aov_fer)
library(emmeans)
medias_fer <- emmeans(aov_fer, ~ TRAT, type = "response") ##como transformei, acrescento essa função para ele pegar as médias verdadeiras
medias_fer
pwpm(medias_fer)
library(multcomp)
cld(medias_fer, Letters = LETTERS)


aov_prod <- lm (PROD ~ TRAT + BLOCO,
               data = soja)
anova(aov_prod)
library(performance)
check_heteroscedasticity(aov_prod)
check_normality(aov_prod)
library(emmeans)
medias_prod <- emmeans(aov_prod, ~ TRAT)
medias_prod
pwpm(medias_prod)
library(multcomp)
medias_prod_group <- cld(medias_prod, Letters = LETTERS)
```

Como a variável fer, as variâncias não eram homogêneas foi feita a transformação por Box Cox

```{r}
b <- boxcox(lm(soja$FER ~1))
lambda <- b$x[which.max(b$y)]
lambda 

soja$FER2 <- (soja$FER ^ lambda - 1)/ lambda
soja$FER2

aov_fer<-lm(log(FER2)~ TRAT + BLOCO,
             data=soja)
anova(aov_fer)
```

Primeiramente, foi um data frame df_prod a partir dos resultados de médias marginais agrupadas medias_prod_group. Em seguida, foi utilizada a função ggplot para criar um gráfico de pontos com a variável TRAT no eixo x e emmean no eixo y, e os limites do eixo y são definidos entre 2000 e 7000. Adicionou-se uma barra de erro com `geom_errorbar`, onde os limites mínimo (lower.CL) e máximo (upper.CL) são especificados. O gráfico é anotado com a letra "A" em uma posição específica utilizando a função `annotate`. A função `knitr::kable` foi utilizada para criar uma tabela formatada com as colunas TRAT, emmean e .group do data frame df_prod, adequada para inclusão em um artigo. A biblioteca `writexl` foi carregada para gerar um arquivo Excel a partir do data frame df_prod, que é salvo como "df_prod.xlsx".

```{r}
df_prod <- data.frame(medias_prod_group)
df_prod |>
  ggplot(aes(TRAT, emmean))+
  geom_point()+
  ylim(2000,7000)+
  geom_errorbar(aes(min = lower.CL,
                    max = upper.CL),
                width = 0.1)+
annotate( geom = "text", x = 1.1, y = 4200,
          label = "A") #exemplo de como coloca letra no gráfico

knitr::kable(df_prod |>  dplyr ::select (TRAT, emmean, .group)) ##Fazer a tabela do artigo, já sai todas as informações
library(writexl) #Gera sua tabela no excel pronta
write_xlsx(df_prod, "df_prod.xlsx")
```
